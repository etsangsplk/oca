// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oca.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	oca.proto

It has these top-level messages:
	ConfigRequest
	Identifier
	ConfigResponse
	Traces
	Nothing
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import opencensus_proto_trace "github.com/census-instrumentation/opencensus-proto/gen-go/traceproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfigRequest struct {
	SamplingRate float64 `protobuf:"fixed64,1,opt,name=sampling_rate,json=samplingRate" json:"sampling_rate,omitempty"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConfigRequest) GetSamplingRate() float64 {
	if m != nil {
		return m.SamplingRate
	}
	return 0
}

type Identifier struct {
	Pid        int64             `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Hostname   string            `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	StartTime  float64           `protobuf:"fixed64,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Identifier) Reset()                    { *m = Identifier{} }
func (m *Identifier) String() string            { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()               {}
func (*Identifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Identifier) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Identifier) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Identifier) GetStartTime() float64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Identifier) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ConfigResponse struct {
	SamplingRate float64     `protobuf:"fixed64,1,opt,name=sampling_rate,json=samplingRate" json:"sampling_rate,omitempty"`
	AckTimeEpoch float64     `protobuf:"fixed64,2,opt,name=ack_time_epoch,json=ackTimeEpoch" json:"ack_time_epoch,omitempty"`
	Identifier   *Identifier `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConfigResponse) GetSamplingRate() float64 {
	if m != nil {
		return m.SamplingRate
	}
	return 0
}

func (m *ConfigResponse) GetAckTimeEpoch() float64 {
	if m != nil {
		return m.AckTimeEpoch
	}
	return 0
}

func (m *ConfigResponse) GetIdentifier() *Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

type Traces struct {
	Identifier *Identifier                    `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Spans      []*opencensus_proto_trace.Span `protobuf:"bytes,2,rep,name=Spans" json:"Spans,omitempty"`
}

func (m *Traces) Reset()                    { *m = Traces{} }
func (m *Traces) String() string            { return proto.CompactTextString(m) }
func (*Traces) ProtoMessage()               {}
func (*Traces) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Traces) GetIdentifier() *Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *Traces) GetSpans() []*opencensus_proto_trace.Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*ConfigRequest)(nil), "rpc.ConfigRequest")
	proto.RegisterType((*Identifier)(nil), "rpc.Identifier")
	proto.RegisterType((*ConfigResponse)(nil), "rpc.ConfigResponse")
	proto.RegisterType((*Traces)(nil), "rpc.Traces")
	proto.RegisterType((*Nothing)(nil), "rpc.Nothing")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TraceService service

type TraceServiceClient interface {
	// PushConfig is initiated by the agent to the client and
	// ConfigRequest is the configuration that the agent asks the
	// client to use
	PushConfig(ctx context.Context, opts ...grpc.CallOption) (TraceService_PushConfigClient, error)
	// ExportTraces is a unidirectional streamer from a client to the agent
	ExportTraces(ctx context.Context, opts ...grpc.CallOption) (TraceService_ExportTracesClient, error)
}

type traceServiceClient struct {
	cc *grpc.ClientConn
}

func NewTraceServiceClient(cc *grpc.ClientConn) TraceServiceClient {
	return &traceServiceClient{cc}
}

func (c *traceServiceClient) PushConfig(ctx context.Context, opts ...grpc.CallOption) (TraceService_PushConfigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TraceService_serviceDesc.Streams[0], c.cc, "/rpc.TraceService/PushConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceServicePushConfigClient{stream}
	return x, nil
}

type TraceService_PushConfigClient interface {
	Send(*ConfigResponse) error
	Recv() (*ConfigRequest, error)
	grpc.ClientStream
}

type traceServicePushConfigClient struct {
	grpc.ClientStream
}

func (x *traceServicePushConfigClient) Send(m *ConfigResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceServicePushConfigClient) Recv() (*ConfigRequest, error) {
	m := new(ConfigRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *traceServiceClient) ExportTraces(ctx context.Context, opts ...grpc.CallOption) (TraceService_ExportTracesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TraceService_serviceDesc.Streams[1], c.cc, "/rpc.TraceService/ExportTraces", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceServiceExportTracesClient{stream}
	return x, nil
}

type TraceService_ExportTracesClient interface {
	Send(*Traces) error
	CloseAndRecv() (*Nothing, error)
	grpc.ClientStream
}

type traceServiceExportTracesClient struct {
	grpc.ClientStream
}

func (x *traceServiceExportTracesClient) Send(m *Traces) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceServiceExportTracesClient) CloseAndRecv() (*Nothing, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Nothing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TraceService service

type TraceServiceServer interface {
	// PushConfig is initiated by the agent to the client and
	// ConfigRequest is the configuration that the agent asks the
	// client to use
	PushConfig(TraceService_PushConfigServer) error
	// ExportTraces is a unidirectional streamer from a client to the agent
	ExportTraces(TraceService_ExportTracesServer) error
}

func RegisterTraceServiceServer(s *grpc.Server, srv TraceServiceServer) {
	s.RegisterService(&_TraceService_serviceDesc, srv)
}

func _TraceService_PushConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceServiceServer).PushConfig(&traceServicePushConfigServer{stream})
}

type TraceService_PushConfigServer interface {
	Send(*ConfigRequest) error
	Recv() (*ConfigResponse, error)
	grpc.ServerStream
}

type traceServicePushConfigServer struct {
	grpc.ServerStream
}

func (x *traceServicePushConfigServer) Send(m *ConfigRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceServicePushConfigServer) Recv() (*ConfigResponse, error) {
	m := new(ConfigResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TraceService_ExportTraces_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceServiceServer).ExportTraces(&traceServiceExportTracesServer{stream})
}

type TraceService_ExportTracesServer interface {
	SendAndClose(*Nothing) error
	Recv() (*Traces, error)
	grpc.ServerStream
}

type traceServiceExportTracesServer struct {
	grpc.ServerStream
}

func (x *traceServiceExportTracesServer) SendAndClose(m *Nothing) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceServiceExportTracesServer) Recv() (*Traces, error) {
	m := new(Traces)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TraceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TraceService",
	HandlerType: (*TraceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushConfig",
			Handler:       _TraceService_PushConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExportTraces",
			Handler:       _TraceService_ExportTraces_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "oca.proto",
}

func init() { proto.RegisterFile("oca.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xc5, 0x09, 0x2d, 0xec, 0x64, 0xdb, 0x20, 0xc3, 0x61, 0xb5, 0x02, 0x35, 0x5a, 0x38, 0xe4,
	0xc2, 0x82, 0x42, 0x0f, 0x08, 0x84, 0x50, 0x8b, 0x72, 0xe0, 0x82, 0x22, 0xb7, 0xf7, 0xc8, 0x75,
	0xa7, 0x89, 0x95, 0xae, 0x6d, 0xec, 0xd9, 0x8a, 0xf2, 0x0d, 0xfc, 0x20, 0x7f, 0x83, 0xec, 0x6d,
	0x42, 0x1b, 0x0e, 0xf4, 0xe6, 0x79, 0x7e, 0x33, 0xf3, 0xde, 0xb3, 0x21, 0xb3, 0x4a, 0xd6, 0xce,
	0x5b, 0xb2, 0xbc, 0xef, 0x9d, 0x2a, 0x07, 0xe4, 0xa5, 0xc2, 0x0e, 0xa9, 0x0e, 0x61, 0xef, 0x8b,
	0x35, 0x17, 0x7a, 0x21, 0xf0, 0x7b, 0x8b, 0x81, 0xf8, 0x4b, 0xd8, 0x0b, 0xb2, 0x71, 0x97, 0xda,
	0x2c, 0xe6, 0x5e, 0x12, 0x16, 0x6c, 0xc4, 0xc6, 0x4c, 0xe4, 0x6b, 0x50, 0x48, 0xc2, 0xea, 0x37,
	0x03, 0xf8, 0x7a, 0x8e, 0x86, 0xf4, 0x85, 0x46, 0xcf, 0x9f, 0x40, 0xdf, 0xe9, 0xf3, 0xc4, 0xec,
	0x8b, 0x78, 0xe4, 0x25, 0x3c, 0x5e, 0xda, 0x40, 0x46, 0x36, 0x58, 0xf4, 0x46, 0x6c, 0x9c, 0x89,
	0x4d, 0xcd, 0x5f, 0x00, 0x04, 0x92, 0x9e, 0xe6, 0xa4, 0x1b, 0x2c, 0xfa, 0x69, 0x7c, 0x96, 0x90,
	0x53, 0xdd, 0x20, 0xff, 0x0c, 0x20, 0x89, 0xbc, 0x3e, 0x6b, 0x09, 0x43, 0xf1, 0x70, 0xd4, 0x1f,
	0x0f, 0x26, 0x07, 0xb5, 0x77, 0xaa, 0xfe, 0xbb, 0xb1, 0x3e, 0xda, 0x30, 0xa6, 0x86, 0xfc, 0xb5,
	0xb8, 0xd5, 0x52, 0x7e, 0x82, 0xe1, 0xd6, 0x75, 0x14, 0xb8, 0xc2, 0xeb, 0x24, 0x30, 0x13, 0xf1,
	0xc8, 0x9f, 0xc1, 0xce, 0x95, 0xbc, 0x6c, 0xd7, 0xea, 0xba, 0xe2, 0x43, 0xef, 0x3d, 0xab, 0x7e,
	0x31, 0xd8, 0x5f, 0x47, 0x12, 0x9c, 0x35, 0x01, 0xef, 0x95, 0x09, 0x7f, 0x05, 0xfb, 0x52, 0xad,
	0x92, 0xa9, 0x39, 0x3a, 0xab, 0x96, 0x69, 0x34, 0x13, 0xb9, 0x54, 0xab, 0x68, 0x6c, 0x1a, 0x31,
	0xfe, 0x06, 0x40, 0x6f, 0x6c, 0x24, 0xf3, 0x83, 0xc9, 0x70, 0xcb, 0x9d, 0xb8, 0x45, 0xa9, 0x1a,
	0xd8, 0x3d, 0x8d, 0xef, 0x15, 0xb6, 0x5a, 0xd9, 0x7f, 0x5b, 0xf9, 0x04, 0x76, 0x4e, 0x9c, 0x34,
	0xa1, 0xe8, 0xa5, 0x10, 0x9f, 0xd7, 0xd6, 0xa1, 0x51, 0x68, 0x42, 0x1b, 0xba, 0xd7, 0xaf, 0xbb,
	0x9f, 0x10, 0x49, 0xa2, 0xa3, 0x56, 0x19, 0x3c, 0xfa, 0x66, 0x69, 0xa9, 0xcd, 0x62, 0xf2, 0x13,
	0xf2, 0xb4, 0xf9, 0x04, 0xfd, 0x95, 0x56, 0xc8, 0x3f, 0x02, 0xcc, 0xda, 0xb0, 0xec, 0xb2, 0xe1,
	0x4f, 0xd3, 0xe6, 0xbb, 0x41, 0x95, 0xfc, 0x0e, 0x98, 0x3e, 0x54, 0xf5, 0x60, 0xcc, 0xde, 0x32,
	0xfe, 0x1a, 0xf2, 0xe9, 0x0f, 0x67, 0x3d, 0xdd, 0x98, 0x19, 0x24, 0x66, 0x57, 0x94, 0x79, 0x2a,
	0x6e, 0xf6, 0xc6, 0x86, 0xe3, 0x43, 0x38, 0xd0, 0xf6, 0x5f, 0xbd, 0x72, 0x81, 0x86, 0x3a, 0xd5,
	0xc7, 0xc3, 0xa3, 0x58, 0xa4, 0x09, 0xb3, 0x78, 0x39, 0x63, 0x67, 0xbb, 0x89, 0xf5, 0xee, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x48, 0x8c, 0x92, 0xb7, 0xf2, 0x02, 0x00, 0x00,
}
